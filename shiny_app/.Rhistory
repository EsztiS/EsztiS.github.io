hist(samplemean, 20)
library(MASS)
head(mammals)
lm(brain ~ body, data=mammals)
plot(model)
model = lm(brain ~ body, data=mammals)
plot(model)
?par
par(mfrow = c(2,2))
plot(model)
?par
par(mfrow = c(2,2))
plot(model)
par(mfrow = c(1,1))
plot(model)
par(mfrow = c(1,1,1,1))
par(mar = c(1,1,1,1))
plot(model)
dev.off()
plot(model)
par(mar = c(1,1,1,1))
par(mfrow = c(2,2))
plot(model)
par(mar = c(0,0,0,0))
par(mfrow = c(2,2))
plot(model)
par(mar = c(1.5,1.5,1.5,1.5))
par(mfrow = c(2,2))
plot(model)
par(mar = c(2,2,2,2))
par(mfrow = c(2,2))
plot(model)
par(mar = c(3,3,3,3))
plot(model)
dev.off()
?dev.off()
plot.default()
?plot
?par
par(mar = c(3,3,3,3))
par(mfrow = c(2,2))
plot(model)
?log
head(brain)
head(mammals$brain)
summarise(brain)
library(dplyr)
summaris(mammals$brain)
summarise(mammals$brain)
mean(mammals$brain)
median(mammals$brain)
log(mammals$brain)
l10body = log(mammals$body)
l10brain = log(mammals$brain)
plot(l10brain,l10body)
log.model = lm(l10brain ~ l10body)
abline(a = log.model$coefficients[[1]],
b = log.model$coefficients[[2]],
lwd = 2,
col = 'red')
dev.off()
plot(l10brain,l10body)
log.model = lm(l10brain ~ l10body)
abline(a = log.model$coefficients[[1]],
b = log.model$coefficients[[2]],
lwd = 2,
col = 'red')
?abline
log.model$coefficents
log.model = lm(l10brain ~ l10body)
log.model$coefficents
log.model$coefficent
log.model
log.model$coefficients
log.model$coefficients[[1]]
log.model$coefficients[[2]]
abline(a = log.model$coefficients[[2]],
b = log.model$coefficients[[1]],
lwd = 2,
col = 'blue')
plot(log.model)
log.model = lm(l10brain ~ l10body)
plot(log.model)
log.model = lm(l10brain ~ l10body)
abline(a = log.model$coefficients[[1]],
b = log.model$coefficients[[2]],
lwd = 2,
col = 'red')
l10brain = log(mammals$brain)
l10body = log(mammals$body)
plot(l10brain,l10body)
log.model = lm(l10brain ~ l10body)
abline(a = log.model$coefficients[[1]],
b = log.model$coefficients[[2]],
lwd = 2,
col = 'red')
lm.model = lm(brain ~ body, data=mammals)
plot(lm.model)
l10brain = log(mammals$brain)
l10body = log(mammals$body)
plot(l10brain,l10body)
log.model = lm(l10brain ~ l10body)
abline(a = log.model$coefficients[[1]],
b = log.model$coefficients[[2]],
lwd = 2,
col = 'red')
log.model$coefficients
log.model$coefficients[[1]]
abline(a = log.model$coefficients[[2]],
b = log.model$coefficients[[1]],
lwd = 2,
col = 'blue')
summary(l10body)
summary(log.model)
mammals$brain
l10brain
log(44.5)
type(l10brain)
class(l10brain)
test = cbind(l10brain, l10body)
test
test.line = lm(l10body ~ l10brain, data = test)
test.line = lm(test$l10body ~ test$l10brain)
test.line = lm(l10body ~ l10brain)
summary(test.line)
plot(test.line)
plot(l10brain, l10body)
abline(test.line)
abline(log.model)
log.model = lm(l10body ~ l10brain)
plot(l10brain,l10body)
log.model = lm(l10body ~ l10brain)
abline(a = log.model$coefficients[[1]],
b = log.model$coefficients[[2]],
lwd = 2,
col = 'red')
plot(log.model)
log2.model = lm(l10brain ~ l10body)
abline(a = log2.model$coefficients[[1]],
b = log2.model$coefficients[[2]],
lwd = 2,
col = 'blue')
points(l10body, l10brain, 'red')
points(l10body, l10brain, pch = 'red')
?lines
plot(l10brain,l10body)
log.model = lm(l10body ~ l10brain)
abline(log.model
lwd = 2,
col = 'red')
abline(log.model)
abline(a = log2.model$coefficients[[1]],
b = log2.model$coefficients[[2]],
lwd = 2,
col = 'red')
log.model = lm(l10body ~ l10brain)
abline(log.model) # or if you want to adjust aesthetics
abline(a = log.model$coefficients[[1]],
b = log.model$coefficients[[2]],
lwd = 2,
col = 'red')
plot(l10brain,l10body)
log.model = lm(l10body ~ l10brain)
abline(log.model) # or if you want to adjust aesthetics
abline(a = log.model$coefficients[[1]],
b = log.model$coefficients[[2]],
lwd = 2,
col = 'red')
cars
head(cars)
model = lm(dist ~ speed, data = cars)
?lm
?formula
model = lm(dist ~ speed + 0, data = cars)
model_noI = lm(dist ~ speed + 0, data = cars)
plot(speed, dist)
plot(speed, dist, data=cars)
plot(data=cars, speed, dist)
plot(cars$speed, cars$dist)
abline(model_noI)
abline(model_noI, col='r')
abline(model_noI, col='red')
abline(model_noI, col='red', lwd = 2)
abline(model, col='blue', lwd=2)
model_noI = lm(dist ~ 0 + speed, data = cars)
plot(cars$speed, cars$dist)
abline(model_noI, col='red', lwd = 2)
abline(model, col='blue', lwd=2)
model_noI = lm(dist ~ speed + 0, data = cars)
plot(cars$speed, cars$dist)
abline(model_noI, col='red', lwd = 2)
model_noI = lm(dist ~ speed -1 , data = cars)
plot(cars$speed, cars$dist)
abline(model_noI, col='red', lwd = 2)
abline(model, col='blue', lwd=2)
summary(model_noI)
summary(model)
model = lm(dist ~ speed, data = cars)
model_noI = lm(dist ~ speed -1 , data = cars)
plot(cars$speed, cars$dist)
abline(model_noI, col='red', lwd = 2)
abline(model, col='blue', lwd=2)
plot(cars$speed, cars$dist, xlim=[-5,30])
plot(cars$speed, cars$dist, xlim=c(-5,30))
abline(model_noI, col='red', lwd = 2)
abline(model, col='blue', lwd=2)
plot(cars$speed, cars$dist, xlim=c(-5,30), ylim=c(-10,130))
abline(model_noI, col='red', lwd = 2)
abline(model, col='blue', lwd=2)
plot(cars$speed, cars$dist, xlim=c(-5,30), ylim=c(-100,130))
abline(model_noI, col='red', lwd = 2)
abline(model, col='blue', lwd=2)
abline(v = 0)
abline(h = 0)
model.quad = lm(dist ~ speed^2 + speed, data = cars)
abline(model.quad, col='violet')
model.quad = lm(dist ~ speed*speed + speed, data = cars)
abline(model.quad, col='violet')
abline(model.quad, col='green')
model.quad = lm(dist ~ speed^3 + speed, data = cars)
abline(model.quad, col='green')
model.quad = lm(dist ~ speed^10 + speed, data = cars)
abline(model.quad, col='green')
x = [1:10]
x = 1:10
y = x^2
plot(x,y)
model=lm(y ~ x^2 + x)
abline(model)
model2 = lm(y ~ x)
abline(model2)
abline(model2, col = 'red')
abline(model3, col = 'green')
model3 = lm(y ~ x + 0)
abline(model3, col = 'green')
model = lm(dist ~ speed, data = cars)
model.quad = lm(dist ~ speed^2 + speed, data = cars)
abline(model,col='red')
plot(cars$speed, cars$dist)
abline(model,col='red')
abline(model.quad, col='green')
model.quad = lm(dist ~ speed^2 + speed, data = cars)
summary(model.quad)
x = speed^2
x = cars$speed^2
model.quad = lm(dist ~ x + speed, data = cars)
summary(model.quad)
model.quad = lm(dist ~ speed*speed + speed, data = cars)
summary(model.quad)
model = lm(dist ~ speed, data = cars)
summary(model)
model.quad = lm(dist ~ I(speed^2) + speed, data = cars)
summary(model.quad)
model.quad = lm(dist ~ I(speed^2) + speed, data = cars)
plot(cars$speed, cars$dist)
abline(model, col='red')
abline(model.quad, col='green')
plot(model.quad)
plot(model.quad)
plot(cars$speed^2, cars$dist)
abline(model.quad, col='green')
plot(cars$speed, cars$dist)
abline(model, col='red')
abline(model.quad, col='green')
summary(model.quad)
model.quad = lm(dist ~ I(speed^2), data = cars)
plot(cars$speed, cars$dist)
abline(model, col='red')
abline(model.quad, col='green')
model.quad = lm(dist ~ I(speed^2) + speed, data = cars)
plot(cars$speed, cars$dist)
abline(model, col='red')
abline(model.quad, col='green')
library(dplyr)
library(MASS)
head(cars)
model = lm(dist ~ speed, data = cars)
model = lm(dist ~ speed, data = cars)
model_noI = lm(dist ~ speed + 0, data = cars)
plot(cars$speed, cars$dist, xlim=c(-5,30), ylim=c(-100,130))
abline(v = 0)
abline(h = 0)
abline(model_noI, col='red', lwd = 2)
abline(model, col='blue', lwd=2)
summarise(model.quad)
model.quad = lm(dist ~ I(speed^2) + speed, data = cars)
summarise(model.quad)
summary(model.quad)
y = (model.quad$coefficients[[2]]*speed^2 +
model.quad$coefficients[[3]]*speed +
model.quad$coefficients[[1]])
y = (model.quad$coefficients[[2]]*cars$speed^2 +
model.quad$coefficients[[3]]*cars$speed +
model.quad$coefficients[[1]])
plot(cars$speed, cars$dist)
abline(model, col='red')
points(cars$speed, y, type='l', col = 'green')
?line
line(cars$speed, y, col = 'purple')
line(cars$speed, y)
abline(test, col='green')
test = line(cars$speed, y)
abline(test, col='green')
plot(cars$speed, cars$dist)
abline(model, col='red', lwd = 2)
abline(v = 0)
abline(h = 0)
abline(model, col='red', lwd = 2, xlim=c(-10,30), ylime=c(-10,130))
abline(model, col='red', lwd = 2, xlim=c(-10,30), ylim=c(-10,130))
plot(cars$speed, cars$dist)
abline(model, col='red', lwd = 2, xlim=c(-10,30), ylim=c(-10,130))
abline(v = 0)
abline(h = 0)
plot(cars$speed, cars$dist, xlim=c(-10,30), ylim=c(-10,130))
abline(model, col='red', lwd = 2)
abline(v = 0)
abline(h = 0)
y = (model.quad$coefficients[[2]]*cars$speed^2 +
model.quad$coefficients[[3]]*cars$speed +
model.quad$coefficients[[1]])
points(cars$speed, y, type='l', col = 'green')
points(cars$speed, y, type='l', col = 'green', lwd = 2)
points(cars$speed, y, type='l', col = 'purple', lwd = 2)
?abline
?fitted
plot(cars$speed, cars$dist, xlim=c(-10,30), ylim=c(-10,130))
abline(model, col='red', lwd = 2)
abline(v = 0)
abline(h = 0)
lines(cars$speed, fitted(model.quad), col='red',type='b')
lines(cars$speed, fitted(model.quad), col='green',type='l')
lines(cars$speed, fitted(model.quad), col='green',lwd = 2)
model.quad = lm(dist ~ I(speed^2) + speed, data = cars)
plot(cars$speed, cars$dist)
lines(cars$speed, fitted(model.quad), col='green',lwd = 2)
plot(cars$speed, cars$dist)
abline(model, col='red', lwd = 2)
y = (model.quad$coefficients[[2]]*cars$speed^2 +
model.quad$coefficients[[3]]*cars$speed +
model.quad$coefficients[[1]])
points(cars$speed, y, type='l', col = 'purple', lwd = 2)
lines(cars$speed, fitted(model.quad), col='green',lwd = 2)
summary(model)
summary(model.quad)
library(gamclass)
install.packages('gamclass')
library(gamclass)
head(loti)
?loti
?loess
plot(loti$DJF)
?loess
?loti
loess(DJF ~ Year, data=loti)
loess(DJF ~ Year, data=loti, span = 1, degree = 2)
loess(DJF ~ Year, data=loti, span = 0.5, degree = 2)
loess(DJF ~ Year, data=loti, span = 0.4, degree = 2)
DJFloess = loess(DJF ~ Year, data=loti, span = 0.4, degree = 2)
summary(DJFloess)
plot(loti$DJF)
DJFlm = lm(DJF ~ Year, data = loti)
DJFloess = loess(DJF ~ Year, data=loti, span = 0.4, degree = 2)
summary(DJFloess)
plot(loti$DJF)
abline(DJFlm, col='red',lwd=2)
plot(loti$DJF)
abline(DJFlm, col='red',lwd=2)
summary(DJFlm)
abline(DJF,DJFlm, col='red',lwd=2)
abline(loti$DJF,DJFlm, col='red',lwd=2)
abline(loti$DJF,fitted(DJFlm), col='red',lwd=2)
abline(DJFlm, col='red',lwd=2)
plot(loti$Year,loti$DJF)
library(gamclass)
head(loti)
DJFlm = lm(DJF ~ Year, data = loti)
DJFloess = loess(DJF ~ Year, data=loti, span = 0.4, degree = 2)
plot(loti$Year,loti$DJF)
abline(DJFlm, col='red',lwd=2)
lines(loti$Year, fitted(DFJloess))
DJFloess = loess(DJF ~ Year, data=loti, span = 0.4, degree = 2)
summary(DJFloess)
lines(loti$Year, fitted(DFJloess))
lines(loti$Year, fitted(DJFloess))
lines(fitted(DJFloess))
lines(fitted(DJFloess), col = 'blue', lwd=2)
library(gamclass)
head(loti)
DJFlm = lm(DJF ~ Year, data = loti)
DJFloess = loess(DJF ~ Year, data=loti, span = 0.4, degree = 2)
summary(DJFloess)
plot(loti$Year,loti$DJF)
abline(DJFlm, col='red',lwd=2)
lines(fitted(DJFloess), col = 'blue', lwd=2)
plot(DJFloess$fitted, DJFloess$residuals, main="LOESS")
y <- seq(from=1, to=10, length.out=100)
a <- y^3 +y^2  + rnorm(100,mean=0, sd=30)
data <- data.frame(a=a, y=y)
plot(y=y, x=a)
linreg <- lm(y~a)
summary(linreg)
loess <- loess(y~a)
summary(loess)
scatter.smooth(data)
abline(linreg, col="blue")
?scatter.smooth
scatter.smooth(loti$DJF, loti$Year)
scatter.smooth(loti$DJF, loti$Year, col = 'red', lwd = 2)
scatter.smooth(loti$Year, loti$DJF, col = 'red', lwd = 2)
DJFloess = loess(DJF ~ Year, data=loti, span = 0.75, degree = 2)
scatter.smooth(loti$Year, loti$DJF, col = 'red', lwd = 2)
DJFloess = loess(DJF ~ Year, data=loti, span = 2, degree = 2)
scatter.smooth(loti$Year, loti$DJF, col = 'red', lwd = 2)
DJFloess = loess(DJF ~ Year, data=loti, span = 0.75, degree = 2)
summary(DJFloess)
test=scatter.smooth(loti$Year, loti$DJF, col = 'red', lwd = 2)
summary(test)
loess.smooth(loti$Year, loti$DJF, span = 0.75, degree = 2 col = 'red', lwd = 2)
loess.smooth(loti$Year, loti$DJF, span = 0.75, degree = 2, col = 'red', lwd = 2)
with(loti, scatter.smooth(Year, DJF))
with(loti, scatter.smooth(Year, DJF), span = 0.75, degree = 2)
with(loti, scatter.smooth(Year, DJF), span = 1, degree = 1)
with(loti, scatter.smooth(Year, DJF), span = 1, degree = 20)
with(loti, scatter.smooth(Year, DJF), span = 20, degree = 20)
loess.smooth(loti$Year, loti$DJF, span = 20, degree = 20, col = 'red', lwd = 2)
with(loti, scatter.smooth(Year, DJF), span = 20, degree = 20)
install.packages('psych')
install.packages('caret')
install.packages('RWeka')
install.packages('ROCR')
install.packages('pROC')
install.packages('glmnet')
install.packages('mvtnorm')
install.packages('pls')
x = 1:10
y = exp(x)
plot(y ~ x)
y = exp(3)
y
y = 0
y = exp(3)
y
y = exp(3)
y2 = log(y)
points(y2)
points(y2 ~ x)
y2
y
y = exp(x)
y
y2 = log(y)
points(y2 ~ x)
points(y2 ~ x, 'red')
points(y2 ~ x, 'r')
points(y2 ~ x, col = 'r')
?points
points(y2 ~ x, col = 'red')
y
library(shiny)
setwd('~/Documents/__NYC_DSA/Dev/EsztiS.github.io/')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
head(i_rate)
new = data.frame(c(2016,0,1,1), c(2017,0,1,1), c(2018,0,1,1), c(2019,0,1,1), c(2020,0,1,1))
new
rbind(new,i_rate)
new = data.frame(c(2016,0,1,1); c(2017,0,1,1); c(2018,0,1,1); c(2019,0,1,1); c(2020,0,1,1))
new = data.frame(c(2020,2019,2018,2017,2016),c(0,0,0,0,0), c(1,1,1,1,1), c(1,1,1,1,1))
new
rbind(new,i_rate)
new = data.frame(c(2020,2019,2018,2017,2016),c(0,0,0,0,0), c(1,1,1,1,1), c(1,1,1,1,1), names = names(i_rate))
namre(i_rate)
names(i_rate)
new = data.frame(c(2020,2019,2018,2017,2016),c(0,0,0,0,0), c(1,1,1,1,1), names = names(i_rate))
new = data.frame(c(2020,2019,2018,2017,2016),c(0,0,0,0,0), c(1,1,1,1,1))
names(new) = names(i_rate)
names(new)
names(i_rate)
new = data.frame(c(2020,2019,2018,2017,2016),c(0,0,0,0,0), c(1,1,1,1,1), c(1,1,1,1,1))
names(new) = names(i_rate)
new
rbind(new,i_rate)
head(i_rate)
i_rate = rbind(new,i_rate)
head(i_rate)
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
